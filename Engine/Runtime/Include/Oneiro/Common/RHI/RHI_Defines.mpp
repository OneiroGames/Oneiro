//
// Copyright (c) Oneiro Games. All rights reserved.
// Licensed under the GNU General Public License, Version 3.0.
//

module;

#include "Oneiro/Common/StdAfx.hpp"

export module Oneiro.Common.RHI.Defines;

import <array>;
import <optional>;
import <vector>;

export namespace oe::RHI
{
	class IShader;
	class IBuffer;
	class IGraphicsPipeline;
	class IComputePipeline;
	class ITextureView;
	class ITextureSampler;
	class ITexture;
	class ICommandBuffer;
	class IRenderGraph;

	struct OE_API Extent2D
	{
		uint32_t width{};
		uint32_t height{};
		bool operator==(const Extent2D&) const noexcept = default;
		Extent2D operator+(const Extent2D& other) const;
		Extent2D operator-(const Extent2D& other) const;
		Extent2D operator*(const Extent2D& other) const;
		Extent2D operator/(const Extent2D& other) const;
		Extent2D operator>>(const Extent2D& other) const;
		Extent2D operator<<(const Extent2D& other) const;
		Extent2D operator+(uint32_t val) const;
		Extent2D operator-(uint32_t val) const;
		Extent2D operator*(uint32_t val) const;
		Extent2D operator/(uint32_t val) const;
		Extent2D operator>>(uint32_t val) const;
		Extent2D operator<<(uint32_t val) const;
	};

	Extent2D operator+(uint32_t val, Extent2D ext);
	Extent2D operator-(uint32_t val, Extent2D ext);
	Extent2D operator*(uint32_t val, Extent2D ext);
	Extent2D operator/(uint32_t val, Extent2D ext);
	Extent2D operator>>(uint32_t val, Extent2D ext);
	Extent2D operator<<(uint32_t val, Extent2D ext);

	struct OE_API Extent3D
	{
		uint32_t width{};
		uint32_t height{};
		uint32_t depth{};

		operator Extent2D() const;
		bool operator==(const Extent3D&) const noexcept = default;
		Extent3D operator+(const Extent3D& other) const;
		Extent3D operator-(const Extent3D& other) const;
		Extent3D operator*(const Extent3D& other) const;
		Extent3D operator/(const Extent3D& other) const;
		Extent3D operator>>(const Extent3D& other) const;
		Extent3D operator<<(const Extent3D& other) const;
		Extent3D operator+(uint32_t val) const;
		Extent3D operator-(uint32_t val) const;
		Extent3D operator*(uint32_t val) const;
		Extent3D operator/(uint32_t val) const;
		Extent3D operator>>(uint32_t val) const;
		Extent3D operator<<(uint32_t val) const;
	};

	Extent3D operator+(uint32_t val, Extent3D ext);
	Extent3D operator-(uint32_t val, Extent3D ext);
	Extent3D operator*(uint32_t val, Extent3D ext);
	Extent3D operator/(uint32_t val, Extent3D ext);
	Extent3D operator>>(uint32_t val, Extent3D ext);
	Extent3D operator<<(uint32_t val, Extent3D ext);

	struct OE_API Offset2D
	{
		uint32_t x{};
		uint32_t y{};

		bool operator==(const Offset2D&) const noexcept = default;
		Offset2D operator+(const Offset2D& other) const;
		Offset2D operator-(const Offset2D& other) const;
		Offset2D operator*(const Offset2D& other) const;
		Offset2D operator/(const Offset2D& other) const;
		Offset2D operator>>(const Offset2D& other) const;
		Offset2D operator<<(const Offset2D& other) const;
		Offset2D operator+(uint32_t val) const;
		Offset2D operator-(uint32_t val) const;
		Offset2D operator*(uint32_t val) const;
		Offset2D operator/(uint32_t val) const;
		Offset2D operator>>(uint32_t val) const;
		Offset2D operator<<(uint32_t val) const;
	};

	inline Offset2D operator+(uint32_t val, Offset2D ext)
	{
		return ext + val;
	}
	inline Offset2D operator-(uint32_t val, Offset2D ext)
	{
		return ext - val;
	}
	inline Offset2D operator*(uint32_t val, Offset2D ext)
	{
		return ext * val;
	}
	inline Offset2D operator/(uint32_t val, Offset2D ext)
	{
		return ext / val;
	}
	inline Offset2D operator>>(uint32_t val, Offset2D ext)
	{
		return ext >> val;
	}
	inline Offset2D operator<<(uint32_t val, Offset2D ext)
	{
		return ext << val;
	}

	struct OE_API Offset3D
	{
		uint32_t x{};
		uint32_t y{};
		uint32_t z{};

		operator Offset2D() const
		{
			return {x, y};
		}
		bool operator==(const Offset3D&) const noexcept = default;
		Offset3D operator+(const Offset3D& other) const
		{
			return {x + other.x, y + other.y, z + other.z};
		}
		Offset3D operator-(const Offset3D& other) const
		{
			return {x - other.x, y - other.y, z - other.z};
		}
		Offset3D operator*(const Offset3D& other) const
		{
			return {x * other.x, y * other.y, z * other.z};
		}
		Offset3D operator/(const Offset3D& other) const
		{
			return {x / other.x, y / other.y, z / other.z};
		}
		Offset3D operator>>(const Offset3D& other) const
		{
			return {x >> other.x, y >> other.y, z >> other.z};
		}
		Offset3D operator<<(const Offset3D& other) const
		{
			return {x << other.x, y << other.y, z << other.z};
		}
		Offset3D operator+(uint32_t val) const
		{
			return *this + Offset3D{val, val, val};
		}
		Offset3D operator-(uint32_t val) const
		{
			return *this - Offset3D{val, val, val};
		}
		Offset3D operator*(uint32_t val) const
		{
			return *this * Offset3D{val, val, val};
		}
		Offset3D operator/(uint32_t val) const
		{
			return *this / Offset3D{val, val, val};
		}
		Offset3D operator>>(uint32_t val) const
		{
			return *this >> Offset3D{val, val, val};
		}
		Offset3D operator<<(uint32_t val) const
		{
			return *this << Offset3D{val, val, val};
		}
	};

	inline Offset3D operator+(uint32_t val, Offset3D ext)
	{
		return ext + val;
	}
	inline Offset3D operator-(uint32_t val, Offset3D ext)
	{
		return ext - val;
	}
	inline Offset3D operator*(uint32_t val, Offset3D ext)
	{
		return ext * val;
	}
	inline Offset3D operator/(uint32_t val, Offset3D ext)
	{
		return ext / val;
	}
	inline Offset3D operator>>(uint32_t val, Offset3D ext)
	{
		return ext >> val;
	}
	inline Offset3D operator<<(uint32_t val, Offset3D ext)
	{
		return ext << val;
	}

	struct Rect2D
	{
		Offset2D offset;
		Extent2D extent;

		bool operator==(const Rect2D&) const noexcept = default;
	};

	enum class ImageType : uint32_t
	{
		TEX_1D,
		TEX_2D,
		TEX_3D,
		TEX_1D_ARRAY,
		TEX_2D_ARRAY,
		TEX_CUBEMAP,
		TEX_CUBEMAP_ARRAY,
		TEX_2D_MULTISAMPLE,
		TEX_2D_MULTISAMPLE_ARRAY,
	};

	/// @brief Specifies how a component is swizzled
	enum class ComponentSwizzle : uint32_t
	{
		ZERO,
		ONE,
		R,
		G,
		B,
		A
	};

	enum class Format : uint32_t
	{
		UNDEFINED,

		// Color formats
		R8_UNORM,
		R8_SNORM,
		R16_UNORM,
		R16_SNORM,
		R8G8_UNORM,
		R8G8_SNORM,
		R16G16_UNORM,
		R16G16_SNORM,
		R3G3B2_UNORM,
		R4G4B4_UNORM,
		R5G5B5_UNORM,
		R8G8B8_UNORM,
		R8G8B8_SNORM,
		R10G10B10_UNORM,
		R12G12B12_UNORM,
		R16G16B16_SNORM,
		R2G2B2A2_UNORM,
		R4G4B4A4_UNORM,
		R5G5B5A1_UNORM,
		R8G8B8A8_UNORM,
		R8G8B8A8_SNORM,
		R10G10B10A2_UNORM,
		R10G10B10A2_UINT,
		R12G12B12A12_UNORM,
		R16G16B16A16_UNORM,
		R16G16B16A16_SNORM,
		R8G8B8_SRGB,
		R8G8B8A8_SRGB,
		R16_FLOAT,
		R16G16_FLOAT,
		R16G16B16_FLOAT,
		R16G16B16A16_FLOAT,
		R32_FLOAT,
		R32G32_FLOAT,
		R32G32B32_FLOAT,
		R32G32B32A32_FLOAT,
		R11G11B10_FLOAT,
		R9G9B9_E5,
		R8_SINT,
		R8_UINT,
		R16_SINT,
		R16_UINT,
		R32_SINT,
		R32_UINT,
		R8G8_SINT,
		R8G8_UINT,
		R16G16_SINT,
		R16G16_UINT,
		R32G32_SINT,
		R32G32_UINT,
		R8G8B8_SINT,
		R8G8B8_UINT,
		R16G16B16_SINT,
		R16G16B16_UINT,
		R32G32B32_SINT,
		R32G32B32_UINT,
		R8G8B8A8_SINT,
		R8G8B8A8_UINT,
		R16G16B16A16_SINT,
		R16G16B16A16_UINT,
		R32G32B32A32_SINT,
		R32G32B32A32_UINT,

		// Depth & stencil formats
		D32_FLOAT,
		D32_UNORM,
		D24_UNORM,
		D16_UNORM,
		D32_FLOAT_S8_UINT,
		D24_UNORM_S8_UINT,

		// Compressed formats
		// DXT
		BC1_RGB_UNORM,
		BC1_RGB_SRGB,
		BC1_RGBA_UNORM,
		BC1_RGBA_SRGB,
		BC2_RGBA_UNORM,
		BC2_RGBA_SRGB,
		BC3_RGBA_UNORM,
		BC3_RGBA_SRGB,
		// RGTC
		BC4_R_UNORM,
		BC4_R_SNORM,
		BC5_RG_UNORM,
		BC5_RG_SNORM,
		// BPTC
		BC6H_RGB_UFLOAT,
		BC6H_RGB_SFLOAT,
		BC7_RGBA_UNORM,
		BC7_RGBA_SRGB,

		// TODO: 64-bits-per-component formats
	};

	// multisampling and anisotropy
	enum class SampleCount : uint32_t
	{
		SAMPLES_1 = 1,
		SAMPLES_2 = 2,
		SAMPLES_4 = 4,
		SAMPLES_8 = 8,
		SAMPLES_16 = 16,
		SAMPLES_32 = 32,
	};

	enum class UploadFormat : uint32_t
	{
		UNDEFINED,
		R,
		RG,
		RGB,
		BGR,
		RGBA,
		BGRA,
		R_INTEGER,
		RG_INTEGER,
		RGB_INTEGER,
		BGR_INTEGER,
		RGBA_INTEGER,
		BGRA_INTEGER,
		DEPTH_COMPONENT,
		STENCIL_INDEX,
		DEPTH_STENCIL,

		/// @brief For CopyTextureToBuffer and CopyBufferToTexture
		INFER_FORMAT,
	};

	enum class UploadType : uint32_t
	{
		UNDEFINED,
		UBYTE,
		SBYTE,
		USHORT,
		SSHORT,
		UINT,
		SINT,
		FLOAT,
		UBYTE_3_3_2,
		UBYTE_2_3_3_REV,
		USHORT_5_6_5,
		USHORT_5_6_5_REV,
		USHORT_4_4_4_4,
		USHORT_4_4_4_4_REV,
		USHORT_5_5_5_1,
		USHORT_1_5_5_5_REV,
		UINT_8_8_8_8,
		UINT_8_8_8_8_REV,
		UINT_10_10_10_2,
		UINT_2_10_10_10_REV,

		/// @brief For CopyTextureToBuffer and CopyBufferToTexture
		INFER_TYPE,
	};

	/// @brief Convenience constant to allow binding the whole buffer in Cmd::BindUniformBuffer and Cmd::BindStorageBuffer
	///
	/// If an offset is provided with this constant, then the range [offset, buffer.Size()) will be bound.
	constexpr inline uint64_t WHOLE_BUFFER = static_cast<uint64_t>(-1);

	enum class Filter : uint32_t
	{
		NONE,
		NEAREST,
		LINEAR,
	};

	enum class AddressMode : uint32_t
	{
		REPEAT,
		MIRRORED_REPEAT,
		CLAMP_TO_EDGE,
		CLAMP_TO_BORDER,
		MIRROR_CLAMP_TO_EDGE,
	};

	enum class BorderColor : uint32_t
	{
		FLOAT_TRANSPARENT_BLACK,
		INT_TRANSPARENT_BLACK,
		FLOAT_OPAQUE_BLACK,
		INT_OPAQUE_BLACK,
		FLOAT_OPAQUE_WHITE,
		INT_OPAQUE_WHITE,
	};

	enum class AspectMaskBit : uint32_t
	{
		COLOR_BUFFER_BIT = 1 << 0,
		DEPTH_BUFFER_BIT = 1 << 1,
		STENCIL_BUFFER_BIT = 1 << 2,
	};

	enum class PrimitiveTopology : uint32_t
	{
		POINT_LIST,
		LINE_LIST,
		LINE_STRIP,
		TRIANGLE_LIST,
		TRIANGLE_STRIP,
		TRIANGLE_FAN,

		/// @note Available only in pipelines with tessellation shaders
		PATCH_LIST,
	};

	enum class PolygonMode : uint32_t
	{
		FILL,
		LINE,
		POINT,
	};

	enum class CullMode : uint32_t
	{
		NONE = 0b00,
		FRONT = 0b01,
		BACK = 0b10,
		FRONT_AND_BACK = 0b11,
	};

	enum class FrontFace : uint32_t
	{
		CLOCKWISE,
		COUNTERCLOCKWISE,
	};

	enum class CompareOp : uint32_t
	{
		NEVER,
		LESS,
		EQUAL,
		LESS_OR_EQUAL,
		GREATER,
		NOT_EQUAL,
		GREATER_OR_EQUAL,
		ALWAYS,
	};

	enum class LogicOp : uint32_t
	{
		CLEAR,
		SET,
		COPY,
		COPY_INVERTED,
		NO_OP,
		INVERT,
		AND,
		NAND,
		OR,
		NOR,
		XOR,
		EQUIVALENT,
		AND_REVERSE,
		OR_REVERSE,
		AND_INVERTED,
		OR_INVERTED,
	};

	enum class BlendFactor : uint32_t
	{
		ZERO,
		ONE,
		SRC_COLOR,
		ONE_MINUS_SRC_COLOR,
		DST_COLOR,
		ONE_MINUS_DST_COLOR,
		SRC_ALPHA,
		ONE_MINUS_SRC_ALPHA,
		DST_ALPHA,
		ONE_MINUS_DST_ALPHA,
		CONSTANT_COLOR,
		ONE_MINUS_CONSTANT_COLOR,
		CONSTANT_ALPHA,
		ONE_MINUS_CONSTANT_ALPHA,
		SRC_ALPHA_SATURATE,
		SRC1_COLOR,
		ONE_MINUS_SRC1_COLOR,
		SRC1_ALPHA,
		ONE_MINUS_SRC1_ALPHA,
	};

	enum class BlendOp : uint32_t
	{
		ADD,
		SUBTRACT,
		REVERSE_SUBTRACT,
		MIN,
		MAX,
	};

	enum class ColorComponentFlag : uint32_t
	{
		NONE,
		R_BIT = 0b0001,
		G_BIT = 0b0010,
		B_BIT = 0b0100,
		A_BIT = 0b1000,
		RGBA_BITS = 0b1111,
	};

	enum class IndexType : uint32_t
	{
		UNSIGNED_BYTE,
		UNSIGNED_SHORT,
		UNSIGNED_INT,
	};

	enum class MemoryBarrierBit : uint32_t
	{
		NONE = 0,
		VERTEX_BUFFER_BIT = 1 << 0,
		INDEX_BUFFER_BIT = 1 << 1,
		UNIFORM_BUFFER_BIT = 1 << 2,
		TEXTURE_FETCH_BIT = 1 << 3,
		IMAGE_ACCESS_BIT = 1 << 4,
		COMMAND_BUFFER_BIT = 1 << 5,
		TEXTURE_UPDATE_BIT = 1 << 6,
		BUFFER_UPDATE_BIT = 1 << 7,
		MAPPED_BUFFER_BIT = 1 << 8,
		FRAMEBUFFER_BIT = 1 << 9,
		SHADER_STORAGE_BIT = 1 << 10,
		QUERY_COUNTER_BIT = 1 << 11,
		ALL_BITS = static_cast<uint32_t>(-1),
		// TODO: add more bits as necessary
	};

	enum class StencilOp : uint32_t
	{
		KEEP = 0,
		ZERO = 1,
		REPLACE = 2,
		INCREMENT_AND_CLAMP = 3,
		DECREMENT_AND_CLAMP = 4,
		INVERT = 5,
		INCREMENT_AND_WRAP = 6,
		DECREMENT_AND_WRAP = 7,
	};

	struct OE_API DrawIndirectCommand
	{
		uint32_t vertexCount;
		uint32_t instanceCount;
		uint32_t firstVertex;
		uint32_t firstInstance;
	};

	struct OE_API DrawIndexedIndirectCommand
	{
		uint32_t indexCount;
		uint32_t instanceCount;
		uint32_t firstIndex;
		int32_t vertexOffset;
		uint32_t firstInstance;
	};

	struct OE_API DispatchIndirectCommand
	{
		uint32_t groupCountX;
		uint32_t groupCountY;
		uint32_t groupCountZ;
	};

	enum class ClipDepthRange
	{
		NEGATIVE_ONE_TO_ONE, // OpenGL default
		ZERO_TO_ONE			 // D3D and Vulkan
	};

	/// @brief Parameters for Buffer::FillData
	struct OE_API BufferFillInfo
	{
		uint64_t offset = 0;
		uint64_t size = WHOLE_BUFFER;
		uint32_t data = 0;
	};

	enum class BufferStorageFlag : uint32_t
	{
		NONE = 0,

		/// @brief Allows the user to update the buffer's contents with Buffer::UpdateData
		DYNAMIC_STORAGE = 1 << 0,

		/// @brief Hints to the implementation to place the buffer storage in host memory
		CLIENT_STORAGE = 1 << 1,

		/// @brief Maps the buffer (persistently and coherently) upon creation
		MAP_MEMORY = 1 << 2,
	};

	struct InputAssemblyState
	{
		PrimitiveTopology topology = PrimitiveTopology::TRIANGLE_LIST;
		bool primitiveRestartEnable = false;
	};

	struct OE_API VertexInputBindingDescription
	{
		uint32_t location;
		uint32_t binding;
		Format format;
		uint32_t offset;
	};

	struct OE_API VertexInputState
	{
		std::vector<VertexInputBindingDescription> vertexBindingDescriptions{};
	};

	struct OE_API TessellationState
	{
		uint32_t patchControlPoints;
	};

	struct OE_API RasterizationState
	{
		bool depthClampEnable = false;
		PolygonMode polygonMode = PolygonMode::FILL;
		CullMode cullMode = CullMode::BACK;
		FrontFace frontFace = FrontFace::COUNTERCLOCKWISE;
		bool depthBiasEnable = false;
		float depthBiasConstantFactor = 0;
		float depthBiasSlopeFactor = 0;
		float lineWidth = 1;
		float pointSize = 1;
	};

	struct OE_API MultisampleState
	{
		bool sampleShadingEnable = false;
		float minSampleShading = 1;
		uint32_t sampleMask = 0xFFFFFFFF;
		bool alphaToCoverageEnable = false;
		bool alphaToOneEnable = false;
	};

	struct OE_API DepthState
	{
		bool depthTestEnable = false;
		bool depthWriteEnable = false;
		CompareOp depthCompareOp = CompareOp::LESS;
	};

	struct OE_API StencilOpState
	{
		StencilOp passOp = StencilOp::KEEP;
		StencilOp failOp = StencilOp::KEEP;
		StencilOp depthFailOp = StencilOp::KEEP;
		CompareOp compareOp = CompareOp::ALWAYS;
		uint32_t compareMask = 0;
		uint32_t writeMask = 0;
		uint32_t reference = 0;

		bool operator==(const StencilOpState&) const noexcept = default;
	};

	struct OE_API StencilState
	{
		bool stencilTestEnable = false;
		StencilOpState front = {};
		StencilOpState back = {};
	};

	struct OE_API ColorBlendAttachmentState // glBlendFuncSeparatei + glBlendEquationSeparatei
	{
		bool blendEnable = false;
		BlendFactor srcColorBlendFactor = BlendFactor::ONE;
		BlendFactor dstColorBlendFactor = BlendFactor::ZERO;
		BlendOp colorBlendOp = BlendOp::ADD;
		BlendFactor srcAlphaBlendFactor = BlendFactor::ONE;
		BlendFactor dstAlphaBlendFactor = BlendFactor::ZERO;
		BlendOp alphaBlendOp = BlendOp::ADD;
		uint32_t colorWriteMask = static_cast<uint32_t>(ColorComponentFlag::RGBA_BITS);

		bool operator==(const ColorBlendAttachmentState&) const noexcept = default;
	};

	struct OE_API ColorBlendState
	{
		bool logicOpEnable = false;
		LogicOp logicOp = LogicOp::COPY;
		std::vector<ColorBlendAttachmentState> attachments{};
		float blendConstants[4] = {0, 0, 0, 0};
	};

	/// @brief Parameters for the constructor of GraphicsPipeline
	struct OE_API GraphicsPipelineInfo
	{
		/// @brief An optional name for viewing in a graphics debugger
		std::string_view name;

		/// @brief Non-null pointer to a vertex shader
		const IShader* vertexShader = nullptr;

		/// @brief Optional pointer to a fragment shader
		const IShader* fragmentShader = nullptr;

		/// @brief Optional pointer to a tessellation control shader
		const IShader* tessellationControlShader = nullptr;

		/// @brief Optional pointer to a tessellation evaluation shader
		const IShader* tessellationEvaluationShader = nullptr;

		InputAssemblyState inputAssemblyState = {};
		VertexInputState vertexInputState = {};
		TessellationState tessellationState = {};
		RasterizationState rasterizationState = {};
		MultisampleState multisampleState = {};
		DepthState depthState = {};
		StencilState stencilState = {};
		ColorBlendState colorBlendState = {};
	};

	/// @brief Parameters for the constructor of ComputePipeline
	struct OE_API ComputePipelineInfo
	{
		/// @brief An optional name for viewing in a graphics debugger
		std::string_view name;

		/// @brief Non-null pointer to a compute shader
		const IShader* shader;
	};

	/// @brief Tells Fwog what to do with a render target at the beginning of a pass
	enum class AttachmentLoadOp : uint32_t
	{
		/// @brief The previous contents of the image will be preserved
		LOAD,

		/// @brief The contents of the image will be cleared to a uniform value
		CLEAR,

		/// @brief The previous contents of the image need not be preserved (they may be discarded)
		DONT_CARE,
	};

	struct OE_API ClearDepthStencilValue
	{
		float depth{};
		int32_t stencil{};
	};

	struct OE_API RenderColorAttachment
	{
		const ITexture* texture{};
		AttachmentLoadOp loadOp = AttachmentLoadOp::LOAD;
		std::array<float, 4> clearValue;
	};

	struct OE_API RenderDepthStencilAttachment
	{
		const ITexture* texture{};
		AttachmentLoadOp loadOp = AttachmentLoadOp::LOAD;
		ClearDepthStencilValue clearValue;
	};

	struct OE_API Viewport
	{
		Rect2D drawRect = {};
		float minDepth = 0.0f;
		float maxDepth = 1.0f;
		ClipDepthRange depthRange = ClipDepthRange::NEGATIVE_ONE_TO_ONE;

		bool operator==(const Viewport&) const noexcept = default;
	};

	// Describes the render targets that may be used in a draw
	struct OE_API PassInfo
	{
		/// @brief An optional name to demarcate the pass in a graphics debugger
		std::string_view name;

		/// @brief An optional viewport
		///
		/// If empty, the viewport size will be the minimum the render targets' size and the offset will be 0.
		std::optional<Viewport> viewport = std::nullopt;
		std::vector<RenderColorAttachment> colorAttachments;
		std::optional<RenderDepthStencilAttachment> depthAttachment = std::nullopt;
		std::optional<RenderDepthStencilAttachment> stencilAttachment = std::nullopt;
	};

	struct OE_API RenderGraphBeginInfo
	{
		/// @brief An optional name to demarcate the pass in a graphics debugger
		std::string_view name;
		Viewport viewport = {};
		AttachmentLoadOp colorLoadOp = AttachmentLoadOp::LOAD;
		std::array<float, 4> clearColorValue;
		AttachmentLoadOp depthLoadOp = AttachmentLoadOp::LOAD;
		float clearDepthValue = 0.0f;
		AttachmentLoadOp stencilLoadOp = AttachmentLoadOp::LOAD;
		int32_t clearStencilValue = 0;

		/// @brief If true, the linear->nonlinear sRGB OETF will be applied to pixels when rendering to the swapchain
		///
		/// This facility is provided because OpenGL does not expose the swapchain as an image we can interact with
		/// in the usual manner.
		bool enableSrgb = true;
	};

	OE_DECLARE_FLAG_TYPE(BufferStorageFlags, BufferStorageFlag, uint32_t);

	/// @brief Parameters for the constructor of Texture
	struct OE_API TextureCreateInfo
	{
		ImageType imageType = {};
		Format format = {};
		Extent3D extent = {};
		uint32_t mipLevels = 0;
		uint32_t arrayLayers = 0;
		SampleCount sampleCount = {};

		bool operator==(const TextureCreateInfo&) const noexcept = default;
	};

	/// @brief Specifies a color component mapping
	struct OE_API ComponentMapping
	{
		ComponentSwizzle r = ComponentSwizzle::R;
		ComponentSwizzle g = ComponentSwizzle::G;
		ComponentSwizzle b = ComponentSwizzle::B;
		ComponentSwizzle a = ComponentSwizzle::A;
	};

	/// @brief Parameters for the constructor of TextureView
	struct OE_API TextureViewCreateInfo
	{
		/// @note Must be an image type compatible with the base texture as defined by table 8.21 in the OpenGL spec
		ImageType viewType = {};
		/// @note Must be a format compatible with the base texture as defined by table 8.22 in the OpenGL spec
		Format format = {};
		ComponentMapping components = {};
		uint32_t minLevel = 0;
		uint32_t numLevels = 0;
		uint32_t minLayer = 0;
		uint32_t numLayers = 0;
	};

	/// @brief Parameters for Texture::UpdateImage
	struct OE_API TextureUpdateInfo
	{
		uint32_t level = 0;
		Offset3D offset = {};
		Extent3D extent = {};
		UploadFormat format = UploadFormat::INFER_FORMAT;
		UploadType type = UploadType::INFER_TYPE;
		const void* pixels = nullptr;

		/// @brief Specifies, in texels, the size of rows in the array (for 2D and 3D images). If zero, it is assumed to be tightly packed according
		/// to size
		uint32_t rowLength = 0;

		/// @brief Specifies, in texels, the number of rows in the array (for 3D images. If zero, it is assumed to be tightly packed according to size
		uint32_t imageHeight = 0;
	};

	/// @brief Parameters for Texture::UpdateCompressedImage
	struct OE_API CompressedTextureUpdateInfo
	{
		uint32_t level = 0;
		Offset3D offset = {};
		Extent3D extent = {};
		const void* data = nullptr;
	};

	/// @brief Parameters for Texture::ClearImage
	struct OE_API TextureClearInfo
	{
		uint32_t level = 0;
		Offset3D offset = {};
		Extent3D extent = {};
		UploadFormat format = UploadFormat::INFER_FORMAT;
		UploadType type = UploadType::INFER_TYPE;

		/// @brief If null, then the subresource will be cleared with zeroes
		const void* data = nullptr;
	};

	/// @brief Parameters for the constructor of Sampler
	struct OE_API SamplerState
	{
		bool operator==(const SamplerState& rhs) const noexcept = default;

		float lodBias{0};
		float minLod{-1000};
		float maxLod{1000};

		Filter minFilter = Filter::LINEAR;
		Filter magFilter = Filter::LINEAR;
		Filter mipmapFilter = Filter::NONE;
		AddressMode addressModeU = AddressMode::CLAMP_TO_EDGE;
		AddressMode addressModeV = AddressMode::CLAMP_TO_EDGE;
		AddressMode addressModeW = AddressMode::CLAMP_TO_EDGE;
		BorderColor borderColor = BorderColor::FLOAT_OPAQUE_WHITE;
		SampleCount anisotropy = SampleCount::SAMPLES_1;
		bool compareEnable = false;
		CompareOp compareOp = CompareOp::NEVER;
	};
} // namespace oe::RHI