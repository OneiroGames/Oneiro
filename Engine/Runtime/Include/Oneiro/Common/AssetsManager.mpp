//
// Copyright (c) Oneiro Games. All rights reserved.
// Licensed under the GNU General Public License, Version 3.0.
//

module;

#include "Oneiro/Common/StdAfx.hpp"

export module Oneiro.Common.AssetsManager;

export import Oneiro.Common.AssetsProvider;

import <unordered_map>;

export namespace oe
{
	class OE_API AssetsManager
	{
	public:
		template <class T, class... Args>
		Ref<IAsset> CreateAsset(const std::string& id, Args... args)
		{
			const auto& assetsProvider = GetAssetsProvider<T>();

			const auto hash = OE_MAKE_ASSET_HASH(id);
			auto asset = assetsProvider->CreateAsset(CreateRef<AssetInfo>(hash, args...));
			assetsProvider->CacheAsset(asset);
			return asset;
		}

		template <class T, class... Args>
		Ref<IAsset> CreateAssetAndLoad(const std::string& id, bool async, Args... args)
		{
			const auto& assetsProvider = GetAssetsProvider<T>();

			const auto hash = OE_MAKE_ASSET_HASH(id);
			auto asset = assetsProvider->CreateAsset(CreateRef<AssetInfo>(hash, args...));
			assetsProvider->CacheAsset(asset);
			assetsProvider->LoadAsset(asset, async);
			return asset;
		}

		template <class T, class... Args>
		Ref<IAsset> GetOrCreateAsset(const std::string& id, Args... args)
		{
			const auto& assetsProvider = GetAssetsProvider<T>();

			if (assetsProvider->IsAssetCached(OE_MAKE_ASSET_HASH(id)))
				return GetAsset<T>(id);
			return CreateAsset<T>(id, args...);
		}

		template <class T>
		Ref<IAsset> GetAsset(const std::string& id)
		{
			const auto& assetsProvider = GetAssetsProvider<T>();

			return assetsProvider->GetAsset(OE_MAKE_ASSET_HASH(id));
		}

		template <class T>
		Ref<IAsset> LoadAsset(const std::string& id, bool async)
		{
			const auto& assetsProvider = GetAssetsProvider<T>();

			auto asset = GetAsset<T>(id);
			if (!asset->IsLoaded())
				assetsProvider->LoadAsset(asset, async);
			return asset;
		}

		template <class T>
		void LoadAsset(const Ref<IAsset>& asset, bool async)
		{
			const auto& assetsProvider = GetAssetsProvider<T>();

			if (!asset->IsLoaded())
			{
				assetsProvider->LoadAsset(asset, async);
			}
		}

		void LoadAssetsAsync();

		void CollectGarbage();

		template <class T, class... Args>
		void RegisterAssetsProvider(size_t assetTypeHash, const Args&... args)
		{
			m_AssetsProviders.emplace(assetTypeHash, CreateRef<T>(args...));
		}

		template <class T>
		IAssetsProvider* GetAssetsProvider()
		{
			const auto assetTypeHash = typeid(T).hash_code();
			const auto& iter = m_AssetsProviders.find(assetTypeHash);
			if (iter != m_AssetsProviders.end())
				return iter->second.get();
			return nullptr;
		}

		std::unordered_map<size_t, Ref<IAssetsProvider>> m_AssetsProviders{};
	};
} // namespace oe