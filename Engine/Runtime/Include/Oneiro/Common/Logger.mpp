//
// Copyright (c) Oneiro Games. All rights reserved.
// Licensed under the GNU General Public License, Version 3.0.
//

module;

#include "Oneiro/Common/StdAfx.hpp"

#include "glm/gtx/string_cast.hpp"
#include "spdlog/spdlog.h"

export module Oneiro.Common.Logger;

template <typename OStream, glm::length_t L, typename T, glm::qualifier Q>
constexpr inline OStream& operator<<(OStream& os, const glm::vec<L, T, Q>& vector);

template <typename OStream, glm::length_t C, glm::length_t R, typename T, glm::qualifier Q>
constexpr inline OStream& operator<<(OStream& os, const glm::mat<C, R, T, Q>& matrix);

template <typename OStream, typename T, glm::qualifier Q>
constexpr inline OStream& operator<<(OStream& os, glm::qua<T, Q> quaternion);

export namespace oe
{
	class OE_API Logger
	{
	public:
		Logger();

		[[nodiscard]] const Ref<spdlog::logger>& GetEngineLogger() const noexcept;
		[[nodiscard]] const Ref<spdlog::logger>& GetClientLogger() const noexcept;

	private:
		Ref<spdlog::logger> mEngineLogger{};
		Ref<spdlog::logger> mClientLogger{};
	};
} // namespace oe

template <typename OStream, glm::length_t L, typename T, glm::qualifier Q>
constexpr OStream& operator<<(OStream& os, const glm::vec<L, T, Q>& vector)
{
	return os << glm::to_string(vector);
}

template <typename OStream, glm::length_t C, glm::length_t R, typename T, glm::qualifier Q>
constexpr OStream& operator<<(OStream& os, const glm::mat<C, R, T, Q>& matrix)
{
	return os << glm::to_string(matrix);
}

template <typename OStream, typename T, glm::qualifier Q>
constexpr OStream& operator<<(OStream& os, glm::qua<T, Q> quaternion)
{
	return os << glm::to_string(quaternion);
}
